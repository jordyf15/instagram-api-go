// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	domain "instagram-go/domain"

	mock "github.com/stretchr/testify/mock"

	multipart "mime/multipart"
)

// PostUsecase is an autogenerated mock type for the PostUsecase type
type PostUsecase struct {
	mock.Mock
}

// DeletePost provides a mock function with given fields: _a0, _a1
func (_m *PostUsecase) DeletePost(_a0 string, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindPosts provides a mock function with given fields:
func (_m *PostUsecase) FindPosts() (*[]domain.Post, error) {
	ret := _m.Called()

	var r0 *[]domain.Post
	if rf, ok := ret.Get(0).(func() *[]domain.Post); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]domain.Post)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertPost provides a mock function with given fields: _a0, _a1, _a2
func (_m *PostUsecase) InsertPost(_a0 *domain.Post, _a1 string, _a2 []*multipart.FileHeader) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Post, string, []*multipart.FileHeader) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePost provides a mock function with given fields: _a0, _a1, _a2
func (_m *PostUsecase) UpdatePost(_a0 string, _a1 string, _a2 string) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
