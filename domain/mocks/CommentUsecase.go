// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	domain "instagram-go/domain"

	mock "github.com/stretchr/testify/mock"
)

// CommentUsecase is an autogenerated mock type for the CommentUsecase type
type CommentUsecase struct {
	mock.Mock
}

// DeleteComment provides a mock function with given fields: _a0, _a1
func (_m *CommentUsecase) DeleteComment(_a0 string, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindComments provides a mock function with given fields: _a0
func (_m *CommentUsecase) FindComments(_a0 string) (*[]domain.Comment, error) {
	ret := _m.Called(_a0)

	var r0 *[]domain.Comment
	if rf, ok := ret.Get(0).(func(string) *[]domain.Comment); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]domain.Comment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostComment provides a mock function with given fields: _a0, _a1
func (_m *CommentUsecase) PostComment(_a0 *domain.Comment, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Comment, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PutComment provides a mock function with given fields: _a0, _a1
func (_m *CommentUsecase) PutComment(_a0 *domain.Comment, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Comment, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
