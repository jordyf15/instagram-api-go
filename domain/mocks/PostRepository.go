// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	domain "instagram-go/domain"

	mock "github.com/stretchr/testify/mock"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// PostRepository is an autogenerated mock type for the PostRepository type
type PostRepository struct {
	mock.Mock
}

// DeletePost provides a mock function with given fields: _a0
func (_m *PostRepository) DeletePost(_a0 string) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindOnePost provides a mock function with given fields: _a0
func (_m *PostRepository) FindOnePost(_a0 string) (*domain.Post, error) {
	ret := _m.Called(_a0)

	var r0 *domain.Post
	if rf, ok := ret.Get(0).(func(string) *domain.Post); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Post)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindPosts provides a mock function with given fields: _a0
func (_m *PostRepository) FindPosts(_a0 interface{}) (*[]primitive.M, error) {
	ret := _m.Called(_a0)

	var r0 *[]primitive.M
	if rf, ok := ret.Get(0).(func(interface{}) *[]primitive.M); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]primitive.M)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertPost provides a mock function with given fields: _a0
func (_m *PostRepository) InsertPost(_a0 *domain.Post) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Post) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePost provides a mock function with given fields: _a0, _a1
func (_m *PostRepository) UpdatePost(_a0 string, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
