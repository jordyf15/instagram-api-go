// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// LikeUsecase is an autogenerated mock type for the LikeUsecase type
type LikeUsecase struct {
	mock.Mock
}

// DeleteCommentLike provides a mock function with given fields: _a0, _a1
func (_m *LikeUsecase) DeleteCommentLike(_a0 string, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeletePostLike provides a mock function with given fields: _a0, _a1
func (_m *LikeUsecase) DeletePostLike(_a0 string, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertCommentLike provides a mock function with given fields: _a0, _a1
func (_m *LikeUsecase) InsertCommentLike(_a0 string, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertPostLike provides a mock function with given fields: _a0, _a1
func (_m *LikeUsecase) InsertPostLike(_a0 string, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
